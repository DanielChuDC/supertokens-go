package main

import (
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/supertokens/supertokens-go/supertokens"
)

func main() {
	r := gin.Default()
	r.Handle("GET", "/info", customSupertokensMiddleware(), infoHandler)
	r.Handle("POST", "/session", newSession)
	r.Run(":8080")
}

func customSupertokensMiddleware(condition ...bool) func(*gin.Context) {
	return func(c *gin.Context) {
		var params = []interface{}{}
		if len(condition) == 1 {
			params = append(params, condition[0])
		} else {
			params = append(params, nil)
		}
		params = append(params, func(err error, w http.ResponseWriter) {
			c.Abort()
			supertokens.HandleErrorAndRespond(err, w)
		})
		handler := supertokens.Middleware(func(w http.ResponseWriter, r *http.Request) {
			c.Set(supertokens.GinContext,
				r.Context().Value(supertokens.SessionContext).(supertokens.Session))
			c.Next()
		}, params...)
		handler(c.Writer, c.Request)
	}
}

func newSession(c *gin.Context) {
	_, err := supertokens.CreateNewSession(c.Writer, "user1")
	if err != nil {
		supertokens.HandleErrorAndRespond(err, c.Writer)
	}
	c.JSON(http.StatusOK, gin.H{"msg": "done"})
}

func infoHandler(c *gin.Context) {
	session := c.MustGet(supertokens.GinContext).(supertokens.Session)
	c.JSON(http.StatusOK, gin.H{"data": session.GetUserID()})
}
