//Interface template for go driver

import (
    "github.com/supertokens/supertokens-go/sessions/mux/supertokens"
    "context"
)

myRouter := mux.NewRouter().StrictSlash(true)
myRouter.HandleFunc("/login",loginHandler).Methods('POST')
myRouter.HandleFunc("/auth/refresh", supertokens.Middleware(refreshHandler)).Methods('POST')
myRouter.HandleFunc("/auth/logout",supertokens.Middleware(logoutHandler)).Methods('POST')
myRouter.HandleFunc("/user/info", supertokens.Middleware(getInfo,true)).Methods('GET','PUT')


supertokens.OnTokenTheftDetected( func( sessionHandle string, userId string, response http.ResponseWriter, request *http.Request){

})

supertokens.OnUnauthorized( func( err error, response http.ResponseWriter, request *http.Request){

})

supertokens.OnTryRefreshToken( func( err error, response http.ResponseWriter, request *http.Request){

})

supertokens.OnGeneralError( func( err error, response http.ResponseWriter, request *http.Request){

})


func loginHandler(response http.ResponseWriter, request *http.Request){

    userId := "User1"

    jwtPayload :=  map[string]interface{}{
                        "key" : "value"
    }
    sessionData := map[string]interface{}{
        "awesomeThings": [...]string{"info","moreInfo"}

    }

    _, err := supertokens.CreateNewSession(response, request, userId,jwtPayload, sessionData)

    if err != nil {
        return supertokens.HandleErrorAndRespond(err)
    }

    json.NewEncoder(response).Encode([]byte('{"message": "success"}'))
}


func refreshHandler(response http.ResponseWriter, request *http.Request){
    json.NewEncoder(response).Encode([]byte('{"success": True}'))
}



func logoutHandler(response http.ResponseWriter, request *http.Request){
    context.Context.Value(request.Context, supertokens.sessionContext)

    err := session.RevokeSession()

    if err != nil {
        return supertokens.HandleErrorAndRespond(err)
    }

    json.NewEncoder(response).Encode([]byte('{"success": True}'))

}





func getInfo(response http.ResponseWriter, request *http.Request) error{
    context.Context.Value(request.Context, supertokens.sessionContext)

    data, err := session.getSessionData()
    
    err := session.setSessionData(data)

    if err != nil {
        return supertokens.HandleErrorAndRespond(err)
    }

    userId := session.UserID()
    if request.method == 'GET'{
        json.NewEncoder(response).Encode([]byte('{"message": %s}',userId))
    
    }
        
    newUserInfo,_:= ioutil.ReadAll(request.Body)

    //update user data
    json.NewEncoder(response).Encode([]byte('{"success": True}'))
    return nil
}

